---
source: src/tests/snapshots/mod.rs
expression: dart
---
final class Foo {
  final String x;
  final Bar bar;

  const Foo({required this.x, required this.bar});

  static FooBuilder builder({required String x, required Bar bar}) =>
      FooBuilder(x: x, bar: bar.toBuilder());
  FooBuilder toBuilder() => FooBuilder(x: x, bar: bar.toBuilder());

  Map<String, dynamic> toJson() => {"x": x, "bar": bar.toJson()};
  factory Foo.fromJson(Map<String, dynamic> json) =>
      Foo(x: json["x"] as String, bar: Bar.fromJson(json["bar"]));

  @override
  String toString() =>
      "Foo("
      "x: $x, "
      "bar: $bar"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Foo) {
      return false;
    }
    if (x != other.x) {
      return false;
    }
    if (bar != other.bar) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([x.hashCode, bar.hashCode]);
}

/// Builder class for [Foo]
final class FooBuilder {
  String x;
  BarBuilder bar;

  FooBuilder({required this.x, required this.bar});

  Foo build() => Foo(x: x, bar: bar.build());
}

final class Bar {
  final String x;
  final Bar bar;

  const Bar({required this.x, required this.bar});

  static BarBuilder builder({required String x, required Bar bar}) =>
      BarBuilder(x: x, bar: bar.toBuilder());
  BarBuilder toBuilder() => BarBuilder(x: x, bar: bar.toBuilder());

  Map<String, dynamic> toJson() => {"x": x, "bar": bar.toJson()};
  factory Bar.fromJson(Map<String, dynamic> json) =>
      Bar(x: json["x"] as String, bar: Bar.fromJson(json["bar"]));

  @override
  String toString() =>
      "Bar("
      "x: $x, "
      "bar: $bar"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Bar) {
      return false;
    }
    if (x != other.x) {
      return false;
    }
    if (bar != other.bar) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([x.hashCode, bar.hashCode]);
}

/// Builder class for [Bar]
final class BarBuilder {
  String x;
  BarBuilder bar;

  BarBuilder({required this.x, required this.bar});

  Bar build() => Bar(x: x, bar: bar.build());
}
