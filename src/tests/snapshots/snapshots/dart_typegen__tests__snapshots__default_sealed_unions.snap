---
source: src/tests/snapshots/mod.rs
expression: dart
---
import "package:equatable/equatable.dart";

sealed class Foo with EquatableMixin {
  const Foo();

  FooBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Foo.fromJson(Map<String, dynamic> json) => switch (json["type"]) {
    "X" => X.fromJson(json),
    "Y" => Y.fromJson(json),
    final other => throw ArgumentError("unknown discriminant: $other"),
  };
}

sealed class FooBuilder {
  Foo build();
}

final class X extends Foo with EquatableMixin {
  const X() : super();

  @override
  List<Object?> get props => [];

  XBuilder toBuilder() => XBuilder();

  @override
  Map<String, dynamic> toJson() => {"type": "X"};
  factory X.fromJson(Map<String, dynamic> json) => X();

  @override
  String toString() =>
      "X("
      ")";
}

/// Builder class for [X]
final class XBuilder extends FooBuilder {
  XBuilder() : super();

  X build() => X();
}

final class Y extends Foo with EquatableMixin {
  const Y() : super();

  @override
  List<Object?> get props => [];

  YBuilder toBuilder() => YBuilder();

  @override
  Map<String, dynamic> toJson() => {"type": "Y"};
  factory Y.fromJson(Map<String, dynamic> json) => Y();

  @override
  String toString() =>
      "Y("
      ")";
}

/// Builder class for [Y]
final class YBuilder extends FooBuilder {
  YBuilder() : super();

  Y build() => Y();
}
