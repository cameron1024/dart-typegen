---
source: src/tests/snapshots/mod.rs
expression: dart
---
sealed class Animal {
  const Animal();

  AnimalBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Animal.fromJson(Map<String, dynamic> json) => switch (json["type"]) {
    "Dog" => Dog.fromJson(json),
    "Cat" => Cat.fromJson(json),
    final other => throw ArgumentError("unknown discriminant: $other"),
  };
}

sealed class AnimalBuilder {
  Animal build();
}

final class Dog extends Animal {
  final String name;

  const Dog({required this.name}) : super();

  static DogBuilder builder({required String name}) => DogBuilder(name: name);
  DogBuilder toBuilder() => DogBuilder(name: name);

  @override
  Map<String, dynamic> toJson() => {"name": name, "type": "Dog"};
  factory Dog.fromJson(Map<String, dynamic> json) =>
      Dog(name: json["name"] as String);

  @override
  String toString() =>
      "Dog("
      "name: $name"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Dog) {
      return false;
    }
    if (name != other.name) return false;
    return true;
  }

  @override
  int get hashCode => Object.hashAll([name]);
}

/// Builder class for [Dog]
final class DogBuilder extends AnimalBuilder {
  String name;

  DogBuilder({required this.name}) : super();

  Dog build() => Dog(name: name);
}

final class Cat extends Animal {
  final int age;

  const Cat({required this.age}) : super();

  static CatBuilder builder({required int age}) => CatBuilder(age: age);
  CatBuilder toBuilder() => CatBuilder(age: age);

  @override
  Map<String, dynamic> toJson() => {"age": age, "type": "Cat"};
  factory Cat.fromJson(Map<String, dynamic> json) =>
      Cat(age: json["age"] as int);

  @override
  String toString() =>
      "Cat("
      "age: $age"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Cat) {
      return false;
    }
    if (age != other.age) return false;
    return true;
  }

  @override
  int get hashCode => Object.hashAll([age]);
}

/// Builder class for [Cat]
final class CatBuilder extends AnimalBuilder {
  int age;

  CatBuilder({required this.age}) : super();

  Cat build() => Cat(age: age);
}
