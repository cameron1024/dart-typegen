---
source: src/tests/snapshots/mod.rs
expression: dart
---
final class TopLevel {
  final String name;

  /// the age of this toplevel thing
  final int age;

  /// The color of the thing
  ///
  /// Defaults to [Color.green] because it's the best color
  final Color color;
  final Animal pet;
  final Animal? secondPet;

  const TopLevel({
    required this.name,
    this.age = 123,
    this.color = Color.green,
    required this.pet,
    this.secondPet,
  });

  TopLevelBuilder toBuilder() => TopLevelBuilder(
    name: name,
    age: age,
    color: color,
    pet: pet.toBuilder(),
    secondPet: secondPet,
  );

  Map<String, dynamic> toJson() => {
    "name": name,
    "age": age,
    "color": color,
    "pet": pet.toJson(),
    "second_pet": secondPet,
  };
  factory TopLevel.fromJson(Map<String, dynamic> json) => TopLevel(
    name: json["name"] as String,
    age: json["age"] == null ? 123 : json["age"] as int,
    color: json["color"] == null ? Color.green : json["color"] as Color,
    pet: Animal.fromJson(json["pet"] as Map<String, dynamic>),
    secondPet: json["second_pet"] == null
        ? null
        : json["second_pet"] as Animal?,
  );

  @override
  String toString() =>
      "TopLevel("
      "name: $name, "
      "age: $age, "
      "color: $color, "
      "pet: $pet, "
      "secondPet: $secondPet"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! TopLevel) {
      return false;
    }
    if (name != other.name) return false;
    if (age != other.age) return false;
    if (color != other.color) return false;
    if (pet != other.pet) return false;
    if (secondPet != other.secondPet) return false;
    return true;
  }

  @override
  int get hashCode => Object.hashAll([name, age, color, pet, secondPet]);
}

/// Builder class for [TopLevel]
final class TopLevelBuilder {
  String name;
  int age;
  Color color;
  AnimalBuilder pet;
  Animal? secondPet;

  TopLevelBuilder({
    required this.name,
    required this.age,
    required this.color,
    required this.pet,
    required this.secondPet,
  });

  TopLevel build() => TopLevel(
    name: name,
    age: age,
    color: color,
    pet: pet.build(),
    secondPet: secondPet,
  );
}

abstract final class Unused {
  const Unused();

  UnusedBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Unused.fromJson(Map<String, dynamic> json) =>
      switch (json["something-custom-for-unused"]) {
        "unused_x" => X.fromJson(json),
        "Y" => Y.fromJson(json),
        final other => throw ArgumentError("unknown discriminant: $other"),
      };
}

abstract final class UnusedBuilder {
  Unused build();
}

final class X extends Unused {
  const X() : super();

  XBuilder toBuilder() => XBuilder();

  @override
  Map<String, dynamic> toJson() => {"something-custom-for-unused": "unused_x"};
  factory X.fromJson(Map<String, dynamic> json) => X();

  @override
  String toString() =>
      "X("
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! X) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([]);
}

/// Builder class for [X]
final class XBuilder extends UnusedBuilder {
  XBuilder() : super();

  X build() => X();
}

final class Y extends Unused {
  const Y() : super();

  YBuilder toBuilder() => YBuilder();

  @override
  Map<String, dynamic> toJson() => {"something-custom-for-unused": "Y"};
  factory Y.fromJson(Map<String, dynamic> json) => Y();

  @override
  String toString() =>
      "Y("
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Y) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([]);
}

/// Builder class for [Y]
final class YBuilder extends UnusedBuilder {
  YBuilder() : super();

  Y build() => Y();
}

/// Some docs for animal
///
/// It's either a dog or a cat
sealed class Animal {
  const Animal();

  AnimalBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Animal.fromJson(Map<String, dynamic> json) =>
      switch (json["custom-discriminant"]) {
        "Dog" => Dog.fromJson(json),
        "Cat" => Cat.fromJson(json),
        final other => throw ArgumentError("unknown discriminant: $other"),
      };
}

sealed class AnimalBuilder {
  Animal build();
}

/// Fun-loving buddy
final class Dog extends Animal {
  /// the name
  final String name;
  final Color color;
  final List<String> aliases;

  const Dog({this.name = "Dog", required this.color, required this.aliases})
    : super();

  DogBuilder toBuilder() =>
      DogBuilder(name: name, color: color, aliases: aliases);

  @override
  Map<String, dynamic> toJson() => {
    "name": name,
    "color": color,
    "aliases": aliases,
    "custom-discriminant": "Dog",
  };
  factory Dog.fromJson(Map<String, dynamic> json) => Dog(
    name: json["name"] == null ? "Dog" : json["name"] as String,
    color: json["color"] as Color,
    aliases: json["aliases"] as List<String>,
  );

  @override
  String toString() =>
      "Dog("
      "name: $name, "
      "color: $color, "
      "aliases: $aliases"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Dog) {
      return false;
    }
    if (name != other.name) return false;
    if (color != other.color) return false;
    if (aliases.length != other.aliases.length) return false;
    for (var i = 0; i < aliases.length; i++) {
      if (aliases[i] != other.aliases[i]) return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([name, color, aliases]);
}

/// Builder class for [Dog]
final class DogBuilder extends AnimalBuilder {
  String name;
  Color color;
  List<String> aliases;

  DogBuilder({required this.name, required this.color, required this.aliases})
    : super();

  Dog build() => Dog(name: name, color: color, aliases: aliases);
}

/// Evil hellspawn
final class Cat extends Animal {
  final String name;
  final int satanicPower;
  final Map<String, dynamic> data;

  const Cat({
    this.name = "Destroyer of Worlds",
    this.satanicPower = 9001,
    required this.data,
  }) : super();

  CatBuilder toBuilder() =>
      CatBuilder(name: name, satanicPower: satanicPower, data: data);

  @override
  Map<String, dynamic> toJson() => {
    "name": name,
    "satanic_power":
        // ignore: unnecessary_parenthesis
        ((i) => i ^ 121)(satanicPower),
    "data": data,
    "custom-discriminant": "Cat",
  };
  factory Cat.fromJson(Map<String, dynamic> json) => Cat(
    name: json["name"] == null ? "Destroyer of Worlds" : json["name"] as String,
    satanicPower: json["satanic_power"] == null
        ? 9001
        :
          // ignore: unnecessary_parenthesis
          ((i) => i ^ 121)(json["satanic_power"]),
    data: json["data"] as Map<String, dynamic>,
  );

  @override
  String toString() =>
      "Cat("
      "name: $name, "
      "satanicPower: $satanicPower, "
      "data: $data"
      ")";
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Cat) {
      return false;
    }
    if (name != other.name) return false;
    if (satanicPower != other.satanicPower) return false;
    if (data.length != other.data.length) return false;
    for (final entry in data.entries) {
      if (entry.value != other.data[entry.key]) return false;
    }
    return true;
  }

  @override
  int get hashCode => Object.hashAll([name, satanicPower, data]);
}

/// Builder class for [Cat]
final class CatBuilder extends AnimalBuilder {
  String name;
  int satanicPower;
  Map<String, dynamic> data;

  CatBuilder({
    required this.name,
    required this.satanicPower,
    required this.data,
  }) : super();

  Cat build() => Cat(name: name, satanicPower: satanicPower, data: data);
}

enum Color {
  red,
  green,
  blue;

  factory Color.fromJson(dynamic json) => switch (json) {
    "ew, gross" => Color.red,
    123 => Color.green,
    "blue" => Color.blue,
    final other => throw ArgumentError("Unknown variant: $other"),
  };

  dynamic toJson() => switch (this) {
    Color.red => "ew, gross",
    Color.green => 123,
    Color.blue => "blue",
  };
  @override
  String toString() => switch (this) {
    Color.red => "red",
    Color.green => "green",
    Color.blue => "blue",
  };
  void hello() {}

  void goodbye() => print("cya");
}
