---
source: src/tests/snapshots/mod.rs
expression: dart
---
import "package:equatable/equatable.dart";

final class TopLevel with EquatableMixin {
  final String name;

  /// the age of this toplevel thing
  final int age;

  /// The color of the thing
  ///
  /// Defaults to [Color.green] because it's the best color
  final Color color;
  final Animal pet;
  final Animal? secondPet;

  const TopLevel({
    required this.name,
    this.age = 123,
    this.color = Color.green,
    required this.pet,
    this.secondPet,
  });

  @override
  List<Object?> get props => [name, age, color, pet, secondPet];

  TopLevelBuilder toBuilder() => TopLevelBuilder(
    name: name,
    age: age,
    color: color,
    pet: pet.toBuilder(),
    secondPet: secondPet,
  );

  Map<String, dynamic> toJson() => {
    "name": name,
    "age": age,
    "color": color,
    "pet": pet,
    "secondPet": secondPet,
  };
  factory TopLevel.fromJson(Map<String, dynamic> json) => TopLevel(
    name: json["name"] as String,
    age: json["age"] as int,
    color: json["color"] as Color,
    pet: json["pet"] as Animal,
    secondPet: json["secondPet"] as Animal?,
  );
}

/// Builder class for [TopLevel]
final class TopLevelBuilder {
  String name;
  int age;
  Color color;
  AnimalBuilder pet;
  Animal? secondPet;

  TopLevelBuilder({
    required this.name,
    required this.age,
    required this.color,
    required this.pet,
    required this.secondPet,
  });

  TopLevel build() => TopLevel(
    name: name,
    age: age,
    color: color,
    pet: pet.build(),
    secondPet: secondPet,
  );
}

abstract final class Unused with EquatableMixin {
  const Unused();

  UnusedBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Unused.fromJson(Map<String, dynamic> json) =>
      switch (json["something-custom-for-unused"]) {
        "X" => X.fromJson(json),
        "Y" => Y.fromJson(json),
        final other => throw ArgumentError("unknown discriminant: $other"),
      };
}

abstract final class UnusedBuilder {
  Unused build();
}

final class X extends Unused with EquatableMixin {
  const X() : super();

  @override
  List<Object?> get props => [];

  XBuilder toBuilder() => XBuilder();

  @override
  Map<String, dynamic> toJson() => {"something-custom-for-unused": "X"};
  factory X.fromJson(Map<String, dynamic> json) => X();
}

/// Builder class for [X]
final class XBuilder extends UnusedBuilder {
  XBuilder() : super();

  X build() => X();
}

final class Y extends Unused with EquatableMixin {
  const Y() : super();

  @override
  List<Object?> get props => [];

  YBuilder toBuilder() => YBuilder();

  @override
  Map<String, dynamic> toJson() => {"something-custom-for-unused": "Y"};
  factory Y.fromJson(Map<String, dynamic> json) => Y();
}

/// Builder class for [Y]
final class YBuilder extends UnusedBuilder {
  YBuilder() : super();

  Y build() => Y();
}

/// Some docs for animal
///
/// It's either a dog or a cat
sealed class Animal with EquatableMixin {
  const Animal();

  AnimalBuilder toBuilder();

  Map<String, dynamic> toJson();
  factory Animal.fromJson(Map<String, dynamic> json) =>
      switch (json["custom-discriminant"]) {
        "Dog" => Dog.fromJson(json),
        "Cat" => Cat.fromJson(json),
        final other => throw ArgumentError("unknown discriminant: $other"),
      };
}

sealed class AnimalBuilder {
  Animal build();
}

/// Fun-loving buddy
final class Dog extends Animal with EquatableMixin {
  /// the name
  final String name;
  final Color color;

  const Dog({this.name = "Dog", required this.color}) : super();

  @override
  List<Object?> get props => [name, color];

  DogBuilder toBuilder() => DogBuilder(name: name, color: color);

  @override
  Map<String, dynamic> toJson() => {
    "name": name,
    "color": color,
    "custom-discriminant": "Dog",
  };
  factory Dog.fromJson(Map<String, dynamic> json) =>
      Dog(name: json["name"] as String, color: json["color"] as Color);
}

/// Builder class for [Dog]
final class DogBuilder extends AnimalBuilder {
  String name;
  Color color;

  DogBuilder({required this.name, required this.color}) : super();

  Dog build() => Dog(name: name, color: color);
}

/// Evil hellspawn
final class Cat extends Animal with EquatableMixin {
  final String name;
  final int satanicPower;

  const Cat({this.name = "Destroyer of Worlds", this.satanicPower = 9001})
    : super();

  @override
  List<Object?> get props => [name, satanicPower];

  CatBuilder toBuilder() => CatBuilder(name: name, satanicPower: satanicPower);

  @override
  Map<String, dynamic> toJson() => {
    "name": name,
    "satanicPower": satanicPower,
    "custom-discriminant": "Cat",
  };
  factory Cat.fromJson(Map<String, dynamic> json) => Cat(
    name: json["name"] as String,
    satanicPower: json["satanicPower"] as int,
  );
}

/// Builder class for [Cat]
final class CatBuilder extends AnimalBuilder {
  String name;
  int satanicPower;

  CatBuilder({required this.name, required this.satanicPower}) : super();

  Cat build() => Cat(name: name, satanicPower: satanicPower);
}

enum Color {
  red,
  green,
  blue;

  factory Color.fromJson(dynamic json) => switch (json) {
    "ew, gross" => Color.red,
    123 => Color.green,
    "blue" => Color.blue,
    final other => throw ArgumentError("Unknown variant: $other"),
  };

  dynamic toJson() => switch (this) {
    Color.red => "ew, gross",
    Color.green => 123,
    Color.blue => "blue",
  };
  void hello() {}

  void goodbye() => print("cya");
}
